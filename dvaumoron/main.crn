#
# Copyright 2023 cornucopiarecipes authors.
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
#

def StructType(file, name, *, embeddedFields=[], fieldTypes={}):
    fields = list(embeddedFields)
    for fieldName, fieldType in fieldTypes.items():
        fields.append(Id(fieldName).Add(fieldType))
    file.Type().Id(name).Struct(*fields)

def LowerFirst(s):
    cp = list(s.codepoints())
    cp[0] = cp[0].lower()
    return "".join(cp)

def computeTypeParams(fieldTypes):
    funcParams = []
    structParams = {}
    for fieldName, fieldType in fieldTypes.items():
        inputName = LowerFirst(fieldName)
        funcParams.append(Id(inputName).Add(fieldType))
        structParams[Id(fieldName)] = Id(inputName)
    return funcParams, structParams

def MakeFunc(file, name, fieldTypes, outputType):
    funcParams, structParams = computeTypeParams(fieldTypes)

    file.Func().Id(name).Params(*funcParams).Add(outputType).Block(
        Return(outputType.Clone().Values(structParams))
    )

def NewFunc(file, name, fieldTypes, outputType):
    funcParams, structParams = computeTypeParams(fieldTypes)

    file.Func().Id(name).Params(*funcParams).Op("*").Add(outputType).Block(
        Return(Op("&").Add(outputType).Values(structParams))
    )

def IdOrQual(s):
    i = s.rfind(".")
    if i == -1:
        return Id(s)
    else:
        return Qual(s[:i], s[i+1:])
