
load("dvaumoron/main.crn", "StructType", "MakeFunc", "NewFunc")

QUERY_METHOD = Id("QueryContext").Call(Id("ctx").Qual("context", "Context"), Id("query").String(), Id("args").Op("...").Any()).Parens(List(Op("*").Qual("database/sql", "Rows"), Error()))
QUERY_ROW_METHOD = Id("QueryRowContext").Call(Id("ctx").Qual("context", "Context"), Id("query").String(), Id("args").Op("...").Any()).Op("*").Qual("database/sql", "Row")
EXEC_METHOD = Id("ExecContext").Call(Id("ctx").Qual("context", "Context"), Id("query").String(), Id("args").Op("...").Any()).Parens(List(Qual("database/sql", "Result"), Error()))
DEFER_CANCEL = Defer().Id("cancel").Call()
DEFER_ROWS_CLOSE = Defer().Id("rows").Dot("Close").Call()
IF_ERR_NOT_NIL = If(Err().Op("!=").Nil()).Block(
    Return(Nil(), Err()),
)
FOR_ROWS_SCAN = For(Id("rows").Dot("Next").Call()).Block(
    Err().Op("=").Id("rows").Dot("Scan").Call(Op("&").Id("value")),
    IF_ERR_NOT_NIL,
    Id("res").Op("=").Append(Id("res"), Id("value")),
)
RETURN_RES = Return(Id("res"), Nil())
IF_ERR_NOT_NIL_ZERO = If(Err().Op("!=").Nil()).Block(
    Return(0, Err()),
)

def computeQueryParams(query, poolType, inputTypes):
    funcParams = [Id("pool").Add(poolType), Id("ctx").Qual("context", "Context")]
    callParams = [Id("ctx"), query]
    for k, v in inputTypes.items():
        funcParams.append(Id(k).Add(v))
        callParams.append(Qual("database/sql", "Named").Call(k, Id(k)))
    return funcParams, callParams

def addTimeOut(timeOutDuration):
    return List(Id("ctx"), Id("cancel")).Op(":=").Qual("context", "WithTimeout").Call(Id("ctx"), timeOutDuration)

def createQuery(typeName, fields):
    queryBuilder = ["insert into "]
    queryBuilder.append(typeName.lower())
    queryBuilder.append("s(")
    first = True
    for field in fields:
        if first:
            first = False
        else:
            queryBuilder.append(", ")
        queryBuilder.append(field.lower())
    queryBuilder.append(") values(")
    first = True
    for field in fields:
        if first:
            first = False
        else:
            queryBuilder.append(", ")
        queryBuilder.append(":")
        queryBuilder.append(field)
    queryBuilder.append(");")
    return "".join(queryBuilder)

def readQuery(typeName, fields, primaryKey):
    primaryKey = primaryKey.lower()
    queryBuilder = ["select "]
    first = True
    for field in fields:
        if first:
            first = False
        else:
            queryBuilder.append(", ")
        queryBuilder.append("o.")
        queryBuilder.append(field.lower())
    queryBuilder.append(" from ")
    queryBuilder.append(typeName.lower())
    queryBuilder.append("s as o where o.")
    queryBuilder.append(primaryKey)
    queryBuilder.append(" = :")
    queryBuilder.append(primaryKey)
    queryBuilder.append(";")
    return "".join(queryBuilder)

def updateQuery(typeName, fields, primaryKey):
    queryBuilder = ["update "]
    queryBuilder.append(typeName.lower())
    queryBuilder.append("s set ")
    first = True
    for field in fields:
        if field == primaryKey:
            continue
        if first:
            first = False
        else:
            queryBuilder.append(", ")
        queryBuilder.append(field.lower())
        queryBuilder.append(" = :")
        queryBuilder.append(field)
    queryBuilder.append(" where ")
    queryBuilder.append(primaryKey.lower())
    queryBuilder.append(" = :")
    queryBuilder.append(primaryKey)
    queryBuilder.append(";")
    return "".join(queryBuilder)

def deleteQuery(typeName, primaryKey):
    primaryKey = primaryKey.lower()
    queryBuilder = ["delete from "]
    queryBuilder.append(typeName.lower())
    queryBuilder.append("s where ")
    queryBuilder.append(primaryKey)
    queryBuilder.append(" = :")
    queryBuilder.append(primaryKey)
    queryBuilder.append(";")
    return "".join(queryBuilder)

def QueryerContext(file, name):
    file.Type().Id(name).Interface(
        QUERY_METHOD,
    )

def RowQueryerContext(file, name):
    file.Type().Id(name).Interface(
        QUERY_ROW_METHOD,
    )

def ExecerContext(file, name):
    file.Type().Id(name).Interface(
        EXEC_METHOD,
    )

def SimpleResultQueryFunc(file, name, timeOutDuration, query, poolType, inputTypes, outputType):
    funcParams, callParams = computeQueryParams(query, poolType, inputTypes)

    file.Func().Id(name).Params(*funcParams).Parens(List(outputType, Error())).Block(
        addTimeOut(timeOutDuration),
        DEFER_CANCEL,
        Line(),
        Var().Id("value").Add(outputType),
        Err().Op(":=").Id("pool").Dot("QueryRowContext").Call(*callParams).Dot("Scan").Call(Op("&").Id("value")),
        Return(Id("value"), Err()),
    )

def MultiSimpleResultQueryFunc(file, name, timeOutDuration, query, poolType, inputTypes, outputType):
    funcParams, callParams = computeQueryParams(query, poolType, inputTypes)

    file.Func().Id(name).Params(*funcParams).Parens(List(outputType, Error())).Block(
        addTimeOut(timeOutDuration),
        DEFER_CANCEL,
        Line(),
        Var().Id("value").Add(outputType),
        List(Id("rows"), Err()).Op(":=").Id("pool").Dot("QueryContext").Call(*callParams),
        IF_ERR_NOT_NIL, DEFER_ROWS_CLOSE,
        Line(),

        Id("res").Op(":=").Op("[]").Add(outputType).Values(),
        FOR_ROWS_SCAN, RETURN_RES,
    )

def ConvertedResultQueryFunc(file, name, timeOutDuration, query, poolType, inputTypes, queryResultType, converter, outputType):
    funcParams, callParams = computeQueryParams(query, poolType, inputTypes)

    instructions =  [
        addTimeOut(timeOutDuration),
        DEFER_CANCEL,
        Line(),
    ]

    callParams2 = []
    callParams3 = []
    for k, v in queryResultType.items():
        instructions.append(Var().Id(k).Add(v))
        callParams2.append(Op("&").Id(k))
        callParams3.append(Id(k))

    instructions.append(Err().Op(":=").Id("pool").Dot("QueryRowContext").Call(*callParams).Dot("Scan").Call(*callParams2))
    instructions.append(Return(converter.Clone().Call(*callParams3), Err()))

    file.Func().Id(name).Params(*funcParams).Parens(List(outputType, Error())).Block(*instructions)

def MultiConvertedResultQueryFunc(file, name, timeOutDuration, query, poolType, inputTypes, queryResultType, converter, outputType):
    funcParams, callParams = computeQueryParams(query, poolType, inputTypes)

    instructions =  [
        addTimeOut(timeOutDuration),
        DEFER_CANCEL,
        Line(),
    ]

    callParams2 = []
    callParams3 = []
    for k, v in queryResultType.items():
        instructions.append(Var().Id(k).Add(v))
        callParams2.append(Op("&").Id(k))
        callParams3.append(Id(k))

    instructions.append(List(Id("rows"), Err()).Op(":=").Id("pool").Dot("QueryContext").Call(*callParams))
    instructions.append(IF_ERR_NOT_NIL)
    instructions.append(DEFER_ROWS_CLOSE)
    instructions.append(Line())

    instructions.append(Id("res").Op(":=").Op("[]").Add(outputType).Values())
    instructions.append(For(Id("rows").Dot("Next").Call()).Block(
        Err().Op(":=").Id("rows").Dot("Scan").Call(*callParams2),
        IF_ERR_NOT_NIL,
        Id("res").Op("=").Append(Id("res"), converter.Clone().Call(*callParams3)),
    ))
    instructions.append(RETURN_RES)

    file.Func().Id(name).Params(*funcParams).Parens(List(outputType, Error())).Block(*instructions)

def ExecFunc(file, name, timeOutDuration, query, poolType, inputTypes):
    funcParams, callParams = computeQueryParams(query, poolType, inputTypes)

    file.Func().Id(name).Params(*funcParams).Parens(List(Int64(), Error())).Block(
        addTimeOut(timeOutDuration),
        DEFER_CANCEL,
        Line(),

        List(Id("result"), Err()).Op(":=").Id("pool").Dot("ExecContext").Call(*callParams),
        IF_ERR_NOT_NIL_ZERO,
        Return(Id("result").Dot("RowsAffected").Call()),
    )

def CRUD(file, typeName, *, pointer=False, fields, primaryKey, timeOutDuration, execerContext, rowQueryerContext):
    StructType(file, typeName, namedFields=fields)

    if pointer:
        builderName = "New" + typeName
        outputType = Op("*").Id(typeName)
        NewFunc(file, builderName, fields, Id(typeName))
    else:
        builderName = "Make" + typeName
        outputType = Id(typeName)
        MakeFunc(file, builderName, fields, outputType)    

    file.Line()

    createName = "create" + typeName
    createParams = [Id("pool"), Id("ctx")]
    for field in fields:
        createParams.append(Id("o").Dot(field))

    file.Func().Parens(Id("o").Add(outputType)).Id("Create").Params(Id("pool").Add(execerContext), Id("ctx").Qual("context", "Context")).Error().Block(
        List(Id("_"), Err()).Op(":=").Id(createName).Call(*createParams),
        Return(Err())
    )

    file.Line()

    primaryField = {primaryKey.lower(): fields[primaryKey]}

    ConvertedResultQueryFunc(
        file, name="Read" + typeName, timeOutDuration=timeOutDuration,
        query=readQuery(typeName, fields, primaryKey),
        poolType=rowQueryerContext, inputTypes=primaryField, queryResultType=fields,
        converter=Id(builderName), outputType=outputType,
    )

    file.Line()

    updateName = "update" + typeName

    file.Func().Parens(Id("o").Add(outputType)).Id("Update").Params(Id("pool").Add(execerContext), Id("ctx").Qual("context", "Context")).Error().Block(
        List(Id("_"), Err()).Op(":=").Id(updateName).Call(*createParams),
        Return(Err())
    )

    file.Line()

    deleteName = "delete" + typeName

    file.Func().Parens(Id("o").Add(outputType)).Id("Delete").Params(Id("pool").Add(execerContext), Id("ctx").Qual("context", "Context")).Error().Block(
        List(Id("_"), Err()).Op(":=").Id(deleteName).Call(Id("pool"), Id("ctx"), Id("o").Dot(primaryKey)),
        Return(Err())
    )

    file.Line()

    ExecFunc(
        file, name=createName, timeOutDuration=timeOutDuration,
        query=createQuery(typeName, fields),
        poolType=execerContext, inputTypes=fields,
    )

    file.Line()

    ExecFunc(
        file, name=updateName, timeOutDuration=timeOutDuration,
        query=updateQuery(typeName, fields, primaryKey),
        poolType=execerContext, inputTypes=fields,
    )

    file.Line()

    ExecFunc(
        file, name=deleteName, timeOutDuration=timeOutDuration,
        query=deleteQuery(typeName, primaryKey),
        poolType=execerContext, inputTypes=primaryField,
    )

def ForeignKeyMethod(file, receiverType, *, multi=True, methodName, functionName, foreignKey, outputType, rowQueryerContext):
    if multi:
        outputType = Op("[]").Add(outputType)
    else:
        outputType = outputType.Clone()

    file.Func().Parens(Id("o").Add(receiverType)).Id(methodName).Params(Id("pool").Add(rowQueryerContext), Id("ctx").Qual("context", "Context")).Parens(List(outputType , Error())).Block(
        Return(Id(functionName).Call(Id("pool"), Id("ctx"), Id("o").Dot(foreignKey)))
    )
